name: Build and Create Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Vendor pyBusPirateLite forked repository and copy module
      run: |
        BRANCH_NAME=$(git branch -r --contains ${{ github.ref }} | sed 's#origin/##' | sed 's/^[ \t]*//;s/[ \t]*$//' | head -n 1)
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        git checkout "$BRANCH_NAME"
        git clone --branch new --depth 1 https://github.com/julianvilas/pyBusPirateLite.git
        echo "COMMIT_ID=$(git -C pyBusPirateLite rev-parse --short HEAD)" >> $GITHUB_ENV
        cp -r pyBusPirateLite/pyBusPirateLite vendor/
        rm -r pyBusPirateLite

    - name: Commit and push changes
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Action"
        git add vendor/
        if git diff-index --quiet HEAD --; then
          echo "No changes to commit"
        else
          TAG_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          git commit -m "vendor: pyBusPirateLite (commit: $COMMIT_ID)" -m "Vendoring triggered by tag $TAG_NAME"
          git push origin "$BRANCH_NAME"
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Create Release and Upload Assets
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const tag = process.env.GITHUB_REF;
          const repo = process.env.GITHUB_REPOSITORY;
          const [owner, repoName] = repo.split('/');

          const releaseResponse = await github.rest.repos.createRelease({
            owner: owner,
            repo: repoName,
            tag_name: tag,
            name: `Release ${tag.replace('refs/tags/', '')}`,
          });

          const { id: id } = releaseResponse.data;

          globber = await glob.create('dist/*');
          const files = await globber.glob();
          for (const file of files) {
            const content = fs.readFileSync(file);
            const name = path.basename(file);
            await github.rest.repos.uploadReleaseAsset({
              name: name,
              owner: owner,
              repo: repoName,
              release_id: id,
              data: content,
            });
          }

